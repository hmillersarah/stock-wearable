[{"C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\index.js":"1","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\App.js":"2","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\useToken.js":"4","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\Login.js":"5","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\Dashboard.js":"6","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\Header.js":"7"},{"size":597,"mtime":1666462056426,"results":"8","hashOfConfig":"9"},{"size":662,"mtime":1666493988984,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1666448461146,"results":"11","hashOfConfig":"9"},{"size":604,"mtime":1666462056427,"results":"12","hashOfConfig":"9"},{"size":1911,"mtime":1666470899629,"results":"13","hashOfConfig":"9"},{"size":20695,"mtime":1666501133463,"results":"14","hashOfConfig":"9"},{"size":961,"mtime":1666494331217,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bjhezy",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\index.js",[],"C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\App.js",["32","33","34"],"import './App.css';\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, Routes, Route } from 'react-router-dom';\r\nimport Dashboard from './Dashboard';\r\nimport Login from './Login';\r\nimport useToken from './useToken';\r\n\r\nfunction App() {\r\n  const { token, removeToken, setToken } = useToken();\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div>\r\n      {/* <h1>Stock Wearable App</h1> */}\r\n      <Routes>\r\n        <Route exact path=\"/\" element={<Login setToken={setToken} />} />\r\n        <Route exact path=\"/dashboard\" element={<Dashboard token={token} setToken={setToken} />} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\useToken.js",[],"C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\Login.js",[],"C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\Dashboard.js",["35","36","37","38","39"],"import axios from 'axios';\r\nimport './Dashboard.css';\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport useToken from './useToken';\r\nimport Box from '@mui/material/Box';\r\nimport { \r\n    AppBar, \r\n    Toolbar, \r\n    Typography, \r\n    Container, \r\n    Grid, \r\n    Dialog, \r\n    Button, \r\n    DialogTitle, \r\n    DialogContent, \r\n    DialogContentText, \r\n    DialogActions, \r\n    TextField \r\n} from '@mui/material';\r\nimport '@fontsource/roboto/300.css';\r\nimport '@fontsource/roboto/400.css';\r\nimport '@fontsource/roboto/500.css';\r\nimport '@fontsource/roboto/700.css';\r\n\r\nexport default function Dashboard(props) {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { token, removeToken, setToken } = useToken();\r\n\r\n    const [stockTable, setStockTable] = useState([]);\r\n    const [buttonClicked, setButtonClicked] = useState(false);\r\n\r\n    const prevData = useLocation();\r\n    const userID = prevData.state.currUsername;\r\n    const userPass = prevData.state.currPassword;\r\n\r\n    const [newStock, setNewStock] = useState();\r\n    const [newFrequency, setNewFrequency] = useState();\r\n    const [newPercentChange, setNewPercentChange] = useState();\r\n    const [newAlert, setNewAlert] = useState();\r\n\r\n    const [stockToEdit, setStockToEdit] = useState();\r\n    const [newFreqAfterEdit, setNewFreqAfterEdit] = useState();\r\n    const [newPercentChangeAfterEdit, setNewPercentChangeAfterEdit] = useState();\r\n    const [newAlertAfterEdit, setNewAlertAfterEdit] = useState();\r\n\r\n    const [stockToDelete, setStockToDelete] = useState();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpenAdd = () => {\r\n        setOpen(true);\r\n    };\r\n    \r\n    const handleCloseAdd = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    // const columns = [\r\n    //     {field: 'stock', headerName:'Stock', width: 70},\r\n    //     {field: 'pastPrice', headerName: 'Past Price', type: \"number\", width: 130},\r\n    //     {field: 'currPrice', headerName: 'Current Price', type: \"number\", width: 130},\r\n    //     {field: 'percentChg', headerName: 'Percent Change', type: \"number\", width: 70},\r\n    // ]\r\n\r\n    async function getData() {\r\n        setButtonClicked(true);\r\n        let tempStockTable = [];\r\n        const first = await axios({\r\n            method: \"GET\",\r\n            url: `/get-stocks/${userID}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            for (let i = 0; i < res.length; i++) {\r\n                tempStockTable.push({ \"stock\": res[i][0], \"freq\": res[i][1], \"past\": 0, \"curr\": 0, \"percent\": 0 });\r\n            }\r\n            console.log(tempStockTable);\r\n            return res;\r\n        });\r\n        let tempPrices = [];\r\n        let tempCurrPrices = [];\r\n        for (let i = 0; i < first.length; i++) {\r\n            let currStock = first[i][0];\r\n            let currFreq = first[i][1];\r\n            const second = await axios({\r\n                method: \"GET\",\r\n                url: `/market/${currStock}/${currFreq}`,\r\n            }).then((response) => {\r\n                const res = response.data;\r\n                res.access_token && props.setToken(res.access_token);\r\n                tempPrices.push([currStock, res.toFixed(2)]);\r\n                const pastInd = tempStockTable.findIndex(object => { return object.stock === currStock; });\r\n                tempStockTable[pastInd].past = res.toFixed(2);\r\n            });\r\n            const third = await axios({\r\n                method: \"GET\",\r\n                url: `/stock/${currStock}`,\r\n            }).then((response) => {\r\n                const res = response.data;\r\n                res.access_token && props.setToken(res.access_token);\r\n                tempCurrPrices.push([currStock, res.toFixed(2)]);\r\n                const currInd = tempStockTable.findIndex(object => { return object.stock === currStock; });\r\n                tempStockTable[currInd].curr = res.toFixed(2);\r\n            });\r\n        }\r\n        let tempPriceChange = [];\r\n        for (let i = 0; i < tempCurrPrices.length; i++) {\r\n            let percent = (tempCurrPrices[i][1] - tempPrices[i][1]) / tempPrices[i][1] * 100;\r\n            tempPriceChange.push([tempCurrPrices[i][0], percent.toFixed(2)]);\r\n\r\n            const percentChangeInd = tempStockTable.findIndex(object => { return object.stock === tempCurrPrices[i][0]; });\r\n            tempStockTable[percentChangeInd].percent = percent.toFixed(2);\r\n            setStockTable(tempStockTable);\r\n            // const fourth = await axios({\r\n            //     method: \"PUT\",\r\n            //     url: `/update-stock-price-percent-change/${userID}/${tempCurrPrices[i][0]}/${percent.toFixed(3)}`\r\n            // });\r\n        }\r\n    }\r\n\r\n    async function handleClick(event) {\r\n        await axios({\r\n            method: \"POST\",\r\n            url: `/add-stock/${userID}/${newStock}/${newFrequency}/${newPercentChange}/${newAlert}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Stock has been added!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleEditFreq(event) {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: `/update-stock/${userID}/${stockToEdit}/${newFreqAfterEdit}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Stock has been updated!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleEditPercentChange(event) {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: `/update-percent-change/${userID}/${stockToEdit}/${newPercentChangeAfterEdit}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Percent change has been updated!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleEditAlert(event) {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: `/update-alert/${userID}/${stockToEdit}/${newAlertAfterEdit}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Alert has been updated!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleDelete(event) {\r\n        await axios({\r\n            method: \"DELETE\",\r\n            url: `/delete-stock/${userID}/${stockToDelete}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Stock has been deleted!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        Wearable Stock Portfolio\r\n                    </Typography>\r\n                    {/* <Button color=\"inherit\">Login</Button> */}\r\n                    <Header token={removeToken} />\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid item xs={8} sx={{\r\n                    padding: 5\r\n                }}>\r\n                    <Typography variant=\"h2\">\r\n                        Welcome, {userID}\r\n                    </Typography>\r\n                </Grid>\r\n                <div>\r\n                    <Button variant=\"outlined\" onClick={handleClickOpenAdd}>\r\n                        Open\r\n                    </Button>\r\n                    <Dialog open={open} onClose={handleCloseAdd}>\r\n                        <DialogTitle>Subscribe to a Stock</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Add a new stock to your portfolio...\r\n                            </DialogContentText>\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='stockName'\r\n                                label='Stock Name'\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                helperText=\"Official abbreviation only\"\r\n                                onChange={e => setNewStock(e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='pastPrice'\r\n                                label='Baseline Comparison Date'\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                helperText=\"(1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)\"\r\n                                onChange={e => setNewFrequency(e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='priceCheckInterval'\r\n                                label='Minimum Percent Change for Alerts'\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                helperText=\"Price change to warrant alert on wearable device\"\r\n                                onChange={e => setNewAlert(e.target.value)}\r\n                            />\r\n                            <TextField\r\n                                margin='dense'\r\n                                id='priceCheckInterval'\r\n                                label='Price Change Check Interval'\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                helperText=\"(seconds)\"\r\n                                onChange={e => setNewPercentChange(e.target.value)}\r\n                            />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                        <Button onClick={handleCloseAdd}>Cancel</Button>\r\n                        <Button onClick={handleClick}>Subscribe</Button>\r\n        </DialogActions>\r\n                    </Dialog>\r\n                </div>\r\n\r\n            </Container>\r\n            <div className=\"center\">\r\n                <header>\r\n                    {/* <p>Username was: {userID}</p>\r\n                    <p>Password was: {userPass}</p> */}\r\n                    <p>Username was: {userID}</p>\r\n                    <p>Password was: {userPass}</p>\r\n                    <h2>Stock Portfolio</h2>\r\n                    <p>To get your stock details: </p><button onClick={getData}>Click me</button>\r\n                    {buttonClicked && <div>\r\n                        <div>\r\n                            <table class=\"center\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Stock</th>\r\n                                        <th>Baseline Comparison Date</th>\r\n                                        <th>Past Price</th>\r\n                                        <th>Current Price</th>\r\n                                        <th>Percent Change</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {stockTable.map(item => {\r\n                                        return (\r\n                                            <tr key={item.stock}>\r\n                                                <td>{item.stock}</td>\r\n                                                <td>{item.freq}</td>\r\n                                                <td>{item.past}</td>\r\n                                                <td>{item.curr}</td>\r\n                                                <td>{item.percent}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>}\r\n                    {/* <h2>Stock Portfolio</h2>\r\n                    <p>To get your stock details: </p><button onClick={getData}>Click me</button>\r\n                    {stockData && <div>\r\n                        <p>Stocks for {userID}: {stockData}</p>\r\n                        <p>Past stock price: {stockPrice}</p>\r\n                        <p>Current stock price: {currStockPrice}</p>\r\n                        <p>Percent change: {priceChange}</p>\r\n                    </div>} */}\r\n                    {/* <div>\r\n                        <h2>Add Another Stock to Follow</h2>\r\n                        <form>\r\n                            <label>\r\n                                <p>Stock Name (Official Abbreviation)</p>\r\n                                <input type=\"text\" onChange={e => setNewStock(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>Baseline Comparison Date (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)</p>\r\n                                <input type=\"text\" onChange={e => setNewFrequency(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>Minimum Percent Change to Warrant an Alert</p>\r\n                                <input type=\"text\" onChange={e => setNewPercentChange(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>Alert Interval (seconds)</p>\r\n                                <input type=\"text\" onChange={e => setNewAlert(e.target.value)} />\r\n                            </label>\r\n                            <div>\r\n                                <button type=\"button\" onClick={handleClick}>Add Stock</button>\r\n                            </div>\r\n                        </form>\r\n                    </div> */}\r\n                    <div>\r\n                        <h2>Edit Stock Baseline Comparison Date</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock Whose Baseline Comparison Date You Want to Change</p>\r\n                                    <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                                </label>\r\n                                <label>\r\n                                    <p>New Baseline Comparison Date</p>\r\n                                    <input type=\"text\" onChange={e => setNewFreqAfterEdit(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleEditFreq}>Edit Baseline Comparison Date</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h2>Edit Stock Minimum Percent Change to Warrant an Alert</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock Whose Minimum Percent Change to Warrant an Alert You Want to Change</p>\r\n                                    <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                                </label>\r\n                                <label>\r\n                                    <p>New Minimum Percent Change to Warrant an Alert</p>\r\n                                    <input type=\"text\" onChange={e => setNewPercentChangeAfterEdit(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleEditPercentChange}>Edit Percent Change to Warrant Alert</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                    <h2>Edit Stock Check Interval</h2>                        \r\n                        <form>\r\n                            <label>\r\n                                <p>Stock Whose Check Interval You Want to Change</p>\r\n                                <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>New Check Interval</p>\r\n                                <input type=\"text\" onChange={e => setNewAlertAfterEdit(e.target.value)} />\r\n                            </label>\r\n                            <div>\r\n                                <button type=\"button\" onClick={handleEditAlert}>Edit Check Interval</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    <div>\r\n                        <h2>Edit Stock Alert Interval</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock Whose Alert Interval You Want to Change</p>\r\n                                    <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                                </label>\r\n                                <label>\r\n                                    <p>New Alert Interval</p>\r\n                                    <input type=\"text\" onChange={e => setNewAlertAfterEdit(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleEditAlert}>Edit Alert Interval</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h2>Stop Following a Stock</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock to Unfollow</p>\r\n                                    <input type=\"text\" onChange={e => setStockToDelete(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleDelete}>Unfollow Stock</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    {/* <Header token={removeToken} /> */}\r\n                </header >\r\n            </div >\r\n        </Box>\r\n    );\r\n}","C:\\Users\\sarah\\stock_wearable\\hackgt9\\frontend\\src\\Header.js",[],{"ruleId":"40","severity":1,"message":"41","line":2,"column":17,"nodeType":"42","messageId":"43","endLine":2,"endColumn":25},{"ruleId":"40","severity":1,"message":"44","line":9,"column":18,"nodeType":"42","messageId":"43","endLine":9,"endColumn":29},{"ruleId":"40","severity":1,"message":"45","line":10,"column":9,"nodeType":"42","messageId":"43","endLine":10,"endColumn":17},{"ruleId":"40","severity":1,"message":"45","line":29,"column":11,"nodeType":"42","messageId":"43","endLine":29,"endColumn":19},{"ruleId":"40","severity":1,"message":"46","line":31,"column":13,"nodeType":"42","messageId":"43","endLine":31,"endColumn":18},{"ruleId":"40","severity":1,"message":"47","line":31,"column":33,"nodeType":"42","messageId":"43","endLine":31,"endColumn":41},{"ruleId":"40","severity":1,"message":"48","line":89,"column":19,"nodeType":"42","messageId":"43","endLine":89,"endColumn":25},{"ruleId":"40","severity":1,"message":"49","line":99,"column":19,"nodeType":"42","messageId":"43","endLine":99,"endColumn":24},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'removeToken' is assigned a value but never used.","'navigate' is assigned a value but never used.","'token' is assigned a value but never used.","'setToken' is assigned a value but never used.","'second' is assigned a value but never used.","'third' is assigned a value but never used."]