[{ "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\index.js": "1", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\App.js": "2", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\reportWebVitals.js": "3", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\Login.js": "4", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\useToken.js": "5", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\Dashboard.js": "6", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\Header.js": "7" }, { "size": 597, "mtime": 1666486115982, "results": "8", "hashOfConfig": "9" }, { "size": 662, "mtime": 1666504183322, "results": "10", "hashOfConfig": "9" }, { "size": 375, "mtime": 1666448391925, "results": "11", "hashOfConfig": "9" }, { "size": 2498, "mtime": 1666509137277, "results": "12", "hashOfConfig": "9" }, { "size": 604, "mtime": 1666486115982, "results": "13", "hashOfConfig": "9" }, { "size": 41610, "mtime": 1666516727829, "results": "14", "hashOfConfig": "9" }, { "size": 961, "mtime": 1666504183325, "results": "15", "hashOfConfig": "9" }, { "filePath": "16", "messages": "17", "errorCount": 0, "fatalErrorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0 }, "1mquemi", { "filePath": "18", "messages": "19", "errorCount": 0, "fatalErrorCount": 0, "warningCount": 3, "fixableErrorCount": 0, "fixableWarningCount": 0, "source": "20" }, { "filePath": "21", "messages": "22", "errorCount": 0, "fatalErrorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0 }, { "filePath": "23", "messages": "24", "errorCount": 0, "fatalErrorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0 }, { "filePath": "25", "messages": "26", "errorCount": 0, "fatalErrorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0 }, { "filePath": "27", "messages": "28", "errorCount": 0, "fatalErrorCount": 0, "warningCount": 18, "fixableErrorCount": 0, "fixableWarningCount": 0, "source": "29" }, { "filePath": "30", "messages": "31", "errorCount": 0, "fatalErrorCount": 0, "warningCount": 0, "fixableErrorCount": 0, "fixableWarningCount": 0 }, "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\index.js", [], "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\App.js", ["32", "33", "34"], "import './App.css';\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, Routes, Route } from 'react-router-dom';\r\nimport Dashboard from './Dashboard';\r\nimport Login from './Login';\r\nimport useToken from './useToken';\r\n\r\nfunction App() {\r\n  const { token, removeToken, setToken } = useToken();\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <div>\r\n      {/* <h1>Stock Wearable App</h1> */}\r\n      <Routes>\r\n        <Route exact path=\"/\" element={<Login setToken={setToken} />} />\r\n        <Route exact path=\"/dashboard\" element={<Dashboard token={token} setToken={setToken} />} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\reportWebVitals.js", [], "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\Login.js", [], "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\useToken.js", [], "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\Dashboard.js", ["35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52"], "import axios from 'axios';\r\nimport './Dashboard.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport useToken from './useToken';\r\nimport Box from '@mui/material/Box';\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    Container,\r\n    Grid,\r\n    Dialog,\r\n    Button,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions,\r\n    TextField,\r\n    Card,\r\n    CardActions,\r\n    CardContent\r\n} from '@mui/material';\r\nimport '@fontsource/roboto/300.css';\r\nimport '@fontsource/roboto/400.css';\r\nimport '@fontsource/roboto/500.css';\r\nimport '@fontsource/roboto/700.css';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\n\r\nexport default function Dashboard(props) {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { token, removeToken, setToken } = useToken();\r\n\r\n    const [connectivityStatus, setConnectivityStatus] = useState('Waiting on Connection');\r\n\r\n    const columns = [\r\n        { field: 'stock', headerName: 'Stock', width: 70 },\r\n        { field: 'freq', headerName: 'Baseline Comparison Date', type: \"number\", width: 250 },\r\n        { field: 'past', headerName: 'Past Price', type: \"number\", width: 130 },\r\n        { field: 'curr', headerName: 'Current Price', type: \"number\", width: 130 },\r\n        { field: 'percent', headerName: 'Stock Price Percent Change', type: \"number\", width: 250 },\r\n        { field: 'percentChangeForAlert', headerName: 'Percent Change for Alert', type: \"number\", width: 250 },\r\n        { field: 'checkInterval', headerName: 'Check Interval', type: \"number\", width: 200 },\r\n    ]\r\n\r\n    const [stockTable, setStockTable] = useState([]);\r\n    const [stockTableFinished, setStockTableFinished] = useState(false);\r\n\r\n    const prevData = useLocation();\r\n    const userID = prevData.state.currUsername;\r\n    const userPass = prevData.state.currPassword;\r\n\r\n    const [newStock, setNewStock] = useState();\r\n    const [newFrequency, setNewFrequency] = useState();\r\n    const [newPercentChange, setNewPercentChange] = useState();\r\n    const [newAlert, setNewAlert] = useState();\r\n\r\n    const [stockToEdit, setStockToEdit] = useState();\r\n    const [newFreqAfterEdit, setNewFreqAfterEdit] = useState();\r\n    const [newPercentChangeAfterEdit, setNewPercentChangeAfterEdit] = useState();\r\n    const [newAlertAfterEdit, setNewAlertAfterEdit] = useState();\r\n\r\n    const [stockToDelete, setStockToDelete] = useState();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpenAdd = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleCloseAdd = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [openDeleteStock, setOpenDeleteStock] = React.useState(false);\r\n    const handleClickOpenDelete = () => {\r\n        setOpenDeleteStock(true);\r\n    };\r\n    const handleCloseDelete = () => {\r\n        setOpenDeleteStock(false);\r\n    };\r\n\r\n    const [openEditStockBaseline, setopenEditStockBaseline] = React.useState(false);\r\n    const handleClickOpenEditStockBaseline = () => {\r\n        setopenEditStockBaseline(true);\r\n    };\r\n    const handleCloseEditStockBaseline = () => {\r\n        setopenEditStockBaseline(false);\r\n    };\r\n\r\n    const [openEditMinPercentChg, setopenEditMinPercentChg] = React.useState(false);\r\n    const handleClickOpenEditMinPercentChg = () => {\r\n        setopenEditMinPercentChg(true);\r\n    };\r\n    const handleCloseEditMinPercentChg = () => {\r\n        setopenEditMinPercentChg(false);\r\n    };\r\n\r\n    const [openEditCheckInt, setopenEditCheckInt] = React.useState(false);\r\n    const handleClickOpenEditCheckInt = () => {\r\n        setopenEditCheckInt(true);\r\n    };\r\n    const handleCloseEditCheckInt = () => {\r\n        setopenEditCheckInt(false);\r\n    };\r\n\r\n\r\n    // const columns = [\r\n    //     {field: 'stock', headerName:'Stock', width: 70},\r\n    //     {field: 'pastPrice', headerName: 'Past Price', type: \"number\", width: 130},\r\n    //     {field: 'currPrice', headerName: 'Current Price', type: \"number\", width: 130},\r\n    //     {field: 'percentChg', headerName: 'Percent Change', type: \"number\", width: 70},\r\n    // ]\r\n\r\n    async function getData() {\r\n        let tempStockTable = [];\r\n        const first = await axios({\r\n            method: \"GET\",\r\n            url: `/get-stocks/${userID}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            for (let i = 0; i < res.length; i++) {\r\n                tempStockTable.push({ \"stock\": res[i][0], \"freq\": res[i][1], \"past\": 0, \"curr\": 0, \"percent\": 0, \"percentChangeForAlert\": res[i][2], \"checkInterval\": res[i][3] });\r\n            }\r\n            console.log(res);\r\n            //console.log(tempStockTable);\r\n            return res;\r\n        });\r\n        let tempPrices = [];\r\n        let tempCurrPrices = [];\r\n        for (let i = 0; i < first.length; i++) {\r\n            let currStock = first[i][0];\r\n            let currFreq = first[i][1];\r\n            const second = await axios({\r\n                method: \"GET\",\r\n                url: `/market/${currStock}/${currFreq}`,\r\n            }).then((response) => {\r\n                const res = response.data;\r\n                res.access_token && props.setToken(res.access_token);\r\n                tempPrices.push([currStock, res.toFixed(2)]);\r\n                const pastInd = tempStockTable.findIndex(object => { return object.stock === currStock; });\r\n                tempStockTable[pastInd].past = res.toFixed(2);\r\n            });\r\n            const third = await axios({\r\n                method: \"GET\",\r\n                url: `/stock/${currStock}`,\r\n            }).then((response) => {\r\n                const res = response.data;\r\n                res.access_token && props.setToken(res.access_token);\r\n                tempCurrPrices.push([currStock, res.toFixed(2)]);\r\n                const currInd = tempStockTable.findIndex(object => { return object.stock === currStock; });\r\n                tempStockTable[currInd].curr = res.toFixed(2);\r\n            });\r\n        }\r\n        let tempPriceChange = [];\r\n        for (let i = 0; i < tempCurrPrices.length; i++) {\r\n            let percent = (tempCurrPrices[i][1] - tempPrices[i][1]) / tempPrices[i][1] * 100;\r\n            tempPriceChange.push([tempCurrPrices[i][0], percent.toFixed(2)]);\r\n\r\n            const percentChangeInd = tempStockTable.findIndex(object => { return object.stock === tempCurrPrices[i][0]; });\r\n            tempStockTable[percentChangeInd].percent = percent.toFixed(2);\r\n            setStockTable(tempStockTable);\r\n            setStockTableFinished(true);\r\n            // const fourth = await axios({\r\n            //     method: \"PUT\",\r\n            //     url: `/update-stock-price-percent-change/${userID}/${tempCurrPrices[i][0]}/${percent.toFixed(3)}`\r\n            // });\r\n        }\r\n        await axios({\r\n            method: \"GET\",\r\n            url: `device-status/${userID}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            setConnectivityStatus(res);\r\n        });\r\n    }\r\n\r\n    async function handleClick(event) {\r\n        await axios({\r\n            method: \"POST\",\r\n            url: `/add-stock/${userID}/${newStock}/${newFrequency}/${newPercentChange}/${newAlert}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Stock has been added!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleEditFreq(event) {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: `/update-stock/${userID}/${stockToEdit}/${newFreqAfterEdit}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Stock has been updated!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleEditPercentChange(event) {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: `/update-percent-change/${userID}/${stockToEdit}/${newPercentChangeAfterEdit}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Percent change has been updated!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleEditAlert(event) {\r\n        await axios({\r\n            method: \"PUT\",\r\n            url: `/update-alert/${userID}/${stockToEdit}/${newAlertAfterEdit}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Alert has been updated!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function handleDelete(event) {\r\n        await axios({\r\n            method: \"DELETE\",\r\n            url: `/delete-stock/${userID}/${stockToDelete}`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n            res.access_token && props.setToken(res.access_token);\r\n            window.confirm('Stock has been deleted!');\r\n            window.location.reload();\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function connectToDevice(event) {\r\n        await axios({\r\n            method: \"GET\",\r\n            url: `/device-connect/${userID}/requesting`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    async function disconnectFromDevice(event) {\r\n        await axios({\r\n            method: \"GET\",\r\n            url: `/device-connect/${userID}/disconnecting`,\r\n        }).then((response) => {\r\n            const res = response.data;\r\n        }).catch((error) => {\r\n            if (error.response) {\r\n                console.log(error.response);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, [stockTableFinished, connectivityStatus]);\r\n\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        No Stocks Left Behind\r\n                    </Typography>\r\n                    {/* <Button color=\"inherit\">Login</Button> */}\r\n                    <Header token={removeToken} />\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid item xs={8} sx={{\r\n                    padding: 5\r\n                }}>\r\n                    <Typography variant=\"h2\">\r\n                        Welcome, {userID}\r\n                    </Typography>\r\n                </Grid>\r\n                <h3>Connection Status: {connectivityStatus}</h3>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"flex-start\"\r\n                >\r\n                    <Grid item xs={4}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\">\r\n                                    Add a Stock\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" color=\"text.secondary\">\r\n                                    Add a stock to your portfolio to get alerts for price changes\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button variant=\"outlined\" onClick={handleClickOpenAdd}>\r\n                                    Add Stock\r\n                                </Button>\r\n                                <Dialog open={open} onClose={handleCloseAdd}>\r\n                                    <DialogTitle>Subscribe to a Stock</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText>\r\n                                            Add a new stock to your portfolio...\r\n                                        </DialogContentText>\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='stockName'\r\n                                            label='Stock Name'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"Official abbreviation only\"\r\n                                            onChange={e => setNewStock(e.target.value)}\r\n                                        />\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='pastPrice'\r\n                                            label='Baseline Comparison Date'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"(1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)\"\r\n                                            onChange={e => setNewFrequency(e.target.value)}\r\n                                        />\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='priceCheckInterval'\r\n                                            label='Minimum Percent Change for Alerts'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"Price change to warrant alert on wearable device\"\r\n                                            onChange={e => setNewAlert(e.target.value)}\r\n                                        />\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='priceCheckInterval'\r\n                                            label='Price Change Check Interval'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"(seconds)\"\r\n                                            onChange={e => setNewPercentChange(e.target.value)}\r\n                                        />\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleCloseAdd}>Cancel</Button>\r\n                                        <Button onClick={handleClick}>Subscribe</Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\">\r\n                                    Unfollow a Stock\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" color=\"text.secondary\">\r\n                                    Remove a stock from your portfolio to make room for new ones\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button variant=\"outlined\" onClick={handleClickOpenDelete}>\r\n                                    Delete\r\n                                </Button>\r\n                                <Dialog open={openDeleteStock} onClose={handleCloseDelete}>\r\n                                    <DialogTitle>Unfollow Stock</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText>\r\n                                            Please confirm the stock you would like to remove from your portfolio:\r\n                                        </DialogContentText>\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='deleteStock'\r\n                                            label='Stock Name'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"Type the stock you would like to unfollow\"\r\n                                            onChange={e => setStockToDelete(e.target.value)}\r\n                                        />\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleCloseDelete}>Cancel</Button>\r\n                                        <Button onClick={handleDelete}>Unfollow</Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\">\r\n                                    Edit Baseline Date\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" color=\"text.secondary\">\r\n                                    Change the starting point for price comparison to indicate significant price change\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button variant=\"outlined\" onClick={handleClickOpenEditStockBaseline}>\r\n                                    Edit Baseline Date\r\n                                </Button>\r\n                                <Dialog open={openEditStockBaseline} onClose={handleCloseEditStockBaseline}>\r\n                                    <DialogTitle>Edit Baseline Date</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText>\r\n                                            Update the baseline date of your stock\r\n                                        </DialogContentText>\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='baselinePriceStock'\r\n                                            label='Stock Name'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"Target Stock for New Baseline Comparison Date\"\r\n                                            onChange={e => setStockToEdit(e.target.value)}\r\n                                        />\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='baselinePrice'\r\n                                            label='New Baseline Comparison Date'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"(1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)\"\r\n                                            onChange={e => setNewFreqAfterEdit(e.target.value)}\r\n                                        />\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleCloseEditStockBaseline}>Cancel</Button>\r\n                                        <Button onClick={handleEditFreq}>Edit</Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\">\r\n                                    Edit Stock Percent Change\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" color=\"text.secondary\">\r\n                                    Change the starting point for price comparison to indicate significant price change\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button variant=\"outlined\" onClick={handleClickOpenEditMinPercentChg}>\r\n                                    Edit Stock Percent Change\r\n                                </Button>\r\n                                <Dialog open={openEditMinPercentChg} onClose={handleCloseEditMinPercentChg}>\r\n                                    <DialogTitle>Edit Stock Percent Change</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText>\r\n                                            Update minimum stock percent change needed to warrant alert\r\n                                        </DialogContentText>\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='minPercentChgStock'\r\n                                            label='Stock Name'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"Target Stock for New Percent Change\"\r\n                                            onChange={e => setStockToEdit(e.target.value)}\r\n                                        />\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='minPercentChg'\r\n                                            label='New Minimum Percent Change'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            onChange={e => setNewPercentChangeAfterEdit(e.target.value)}\r\n                                        />\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleCloseEditMinPercentChg}>Cancel</Button>\r\n                                        <Button onClick={handleEditPercentChange}>Edit</Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\">\r\n                                    Edit Check Interval\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" color=\"text.secondary\">\r\n                                    Update seconds interval at which stock price changes are checked\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button variant=\"outlined\" onClick={handleClickOpenEditCheckInt}>\r\n                                    Edit Check Interval\r\n                                </Button>\r\n                                <Dialog open={openEditCheckInt} onClose={handleCloseEditCheckInt}>\r\n                                    <DialogTitle>Edit Price Check Interval</DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText>\r\n                                            Update interval at which stock price changes are checked\r\n                                        </DialogContentText>\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='checkIntStock'\r\n                                            label='Stock Name'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            helperText=\"Target Stock for New Price Change Check Interval\"\r\n                                            onChange={e => setStockToEdit(e.target.value)}\r\n                                        />\r\n                                        <TextField\r\n                                            margin='dense'\r\n                                            id='newCheckInt'\r\n                                            label='New Price Change Check Interval'\r\n                                            fullWidth\r\n                                            variant=\"standard\"\r\n                                            type=\"text\"\r\n                                            onChange={e => setNewAlertAfterEdit(e.target.value)}\r\n                                        />\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button onClick={handleCloseEditCheckInt}>Cancel</Button>\r\n                                        <Button onClick={handleEditAlert}>Edit</Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Typography variant=\"h5\">\r\n                                    Connect to Device\r\n                                </Typography>\r\n                                <Typography variant=\"body1\" color=\"text.secondary\">\r\n                                    Connect to device or disconnect from it.\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button variant=\"outlined\" onClick={connectToDevice}>\r\n                                    Connect\r\n                                </Button>\r\n                                <Button variant=\"outlined\" onClick={disconnectFromDevice}>\r\n                                    Disconnect\r\n                                </Button>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* <div>\r\n                        <h2>Edit Stock Alert Interval</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock Whose Alert Interval You Want to Change</p>\r\n                                    <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                                </label>\r\n                                <label>\r\n                                    <p>New Alert Interval</p>\r\n                                    <input type=\"text\" onChange={e => setNewAlertAfterEdit(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleEditAlert}>Edit Alert Interval</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div> */}\r\n\r\n            </Container>\r\n            <Container>\r\n                <Box style={{ marginTop: 30, padding: 10, backgroundColor: \"#1976d3\" }}>\r\n                    <Typography variant=\"h4\" component=\"div\" color=\"white\" sx={{ flexGrow: 1, paddingTop: 5, paddingLeft: 5 }}>\r\n                        Stock Portfolio\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" color=\"white\" sx={{ paddingLeft: 5 }}>\r\n                        Please wait a few seconds to view stock details.\r\n                    </Typography>\r\n                </Box>\r\n                {/* <p>Username was: {userID}</p>\r\n                    <p>Password was: {userPass}</p> */}\r\n                {/* <p>Username was: {userID}</p>\r\n                    <p>Password was: {userPass}</p>\r\n                    <h2>Stock Portfolio</h2> */}\r\n                {/* <p>Wait a few seconds to view stock details.</p> */}\r\n                <div>\r\n                    <div>\r\n                        {/* <TableContainer component={Paper}>\r\n                                <Table sx={{ width: 3 / 4 }} aria-label=\"simple table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>Stock</TableCell>\r\n                                            <TableCell>Baseline Comparison Date</TableCell>\r\n                                            <TableCell>Past Price</TableCell>\r\n                                            <TableCell>Current Price</TableCell>\r\n                                            <TableCell>Percent Change</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {stockTable.map((row) => (\r\n                                            <TableRow\r\n                                                key={row.stock}\r\n                                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                                            >\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {row.stock}\r\n                                                </TableCell>\r\n                                                <TableCell>{row.freq}</TableCell>\r\n                                                <TableCell>{row.past}</TableCell>\r\n                                                <TableCell>{row.curr}</TableCell>\r\n                                                <TableCell>{row.percent}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer> */}\r\n                        <div style={{ height: 400, width: '100%', padding: 10, overflow: 'auto' }}>\r\n                            <DataGrid\r\n                                getRowId={(row) => row.stock}\r\n                                rows={stockTable}\r\n                                columns={columns}\r\n                                pageSize={5}\r\n                                rowsPerPageOptions={[5]}\r\n                            // checkboxSelection\r\n                            // onSelectionModelChange={(newSelection) => {\r\n                            //     setSelectionModel(newSelection.selectionModel);\r\n                            // }}\r\n                            // selectionModel={selectionModel}\r\n                            />\r\n                        </div>\r\n                        {/* {selectionModel.map(val => <h1>{val}</h1>)} */}\r\n                    </div>\r\n                </div>\r\n                {/* <h2>Stock Portfolio</h2>\r\n                    <p>To get your stock details: </p><button onClick={getData}>Click me</button>\r\n                    {stockData && <div>\r\n                        <p>Stocks for {userID}: {stockData}</p>\r\n                        <p>Past stock price: {stockPrice}</p>\r\n                        <p>Current stock price: {currStockPrice}</p>\r\n                        <p>Percent change: {priceChange}</p>\r\n                    </div>} */}\r\n                {/* <div>\r\n                        <h2>Add Another Stock to Follow</h2>\r\n                        <form>\r\n                            <label>\r\n                                <p>Stock Name (Official Abbreviation)</p>\r\n                                <input type=\"text\" onChange={e => setNewStock(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>Baseline Comparison Date (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)</p>\r\n                                <input type=\"text\" onChange={e => setNewFrequency(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>Minimum Percent Change to Warrant an Alert</p>\r\n                                <input type=\"text\" onChange={e => setNewPercentChange(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>Alert Interval (seconds)</p>\r\n                                <input type=\"text\" onChange={e => setNewAlert(e.target.value)} />\r\n                            </label>\r\n                            <div>\r\n                                <button type=\"button\" onClick={handleClick}>Add Stock</button>\r\n                            </div>\r\n                        </form>\r\n                    </div> */}\r\n                {/* <div>\r\n                        <h2>Edit Stock Baseline Comparison Date</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock Whose Baseline Comparison Date You Want to Change</p>\r\n                                    <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                                </label>\r\n                                <label>\r\n                                    <p>New Baseline Comparison Date</p>\r\n                                    <input type=\"text\" onChange={e => setNewFreqAfterEdit(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleEditFreq}>Edit Baseline Comparison Date</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div> */}\r\n                {/* <div>\r\n                        <h2>Edit Stock Minimum Percent Change to Warrant an Alert</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock Whose Minimum Percent Change to Warrant an Alert You Want to Change</p>\r\n                                    <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                                </label>\r\n                                <label>\r\n                                    <p>New Minimum Percent Change to Warrant an Alert</p>\r\n                                    <input type=\"text\" onChange={e => setNewPercentChangeAfterEdit(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleEditPercentChange}>Edit Percent Change to Warrant Alert</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div> */}\r\n                {/* <div>\r\n                        <h2>Edit Stock Check Interval</h2>\r\n                        <form>\r\n                            <label>\r\n                                <p>Stock Whose Check Interval You Want to Change</p>\r\n                                <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                            </label>\r\n                            <label>\r\n                                <p>New Check Interval</p>\r\n                                <input type=\"text\" onChange={e => setNewAlertAfterEdit(e.target.value)} />\r\n                            </label>\r\n                            <div>\r\n                                <button type=\"button\" onClick={handleEditAlert}>Edit Check Interval</button>\r\n                            </div>\r\n                        </form>\r\n                    </div> */}\r\n                {/* <div>\r\n                        <h2>Edit Stock Alert Interval</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock Whose Alert Interval You Want to Change</p>\r\n                                    <input type=\"text\" onChange={e => setStockToEdit(e.target.value)} />\r\n                                </label>\r\n                                <label>\r\n                                    <p>New Alert Interval</p>\r\n                                    <input type=\"text\" onChange={e => setNewAlertAfterEdit(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleEditAlert}>Edit Alert Interval</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div> */}\r\n                {/* \r\n                    <div>\r\n                        <h2>Stop Following a Stock</h2>\r\n                        <div>\r\n                            <form>\r\n                                <label>\r\n                                    <p>Stock to Unfollow</p>\r\n                                    <input type=\"text\" onChange={e => setStockToDelete(e.target.value)} />\r\n                                </label>\r\n                                <div>\r\n                                    <button type=\"button\" onClick={handleDelete}>Unfollow Stock</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div> */}\r\n                {/* <Header token={removeToken} /> */}\r\n            </Container>\r\n        </Box>\r\n    );\r\n}", "C:\\Users\\BZHU-X1\\Documents\\GitHub\\stock-wearable\\frontend\\src\\Header.js", [], { "ruleId": "53", "severity": 1, "message": "54", "line": 2, "column": 17, "nodeType": "55", "messageId": "56", "endLine": 2, "endColumn": 25 }, { "ruleId": "53", "severity": 1, "message": "57", "line": 9, "column": 18, "nodeType": "55", "messageId": "56", "endLine": 9, "endColumn": 29 }, { "ruleId": "53", "severity": 1, "message": "58", "line": 10, "column": 9, "nodeType": "55", "messageId": "56", "endLine": 10, "endColumn": 17 }, { "ruleId": "53", "severity": 1, "message": "59", "line": 29, "column": 8, "nodeType": "55", "messageId": "56", "endLine": 29, "endColumn": 13 }, { "ruleId": "53", "severity": 1, "message": "60", "line": 30, "column": 8, "nodeType": "55", "messageId": "56", "endLine": 30, "endColumn": 17 }, { "ruleId": "53", "severity": 1, "message": "61", "line": 31, "column": 8, "nodeType": "55", "messageId": "56", "endLine": 31, "endColumn": 17 }, { "ruleId": "53", "severity": 1, "message": "62", "line": 32, "column": 8, "nodeType": "55", "messageId": "56", "endLine": 32, "endColumn": 22 }, { "ruleId": "53", "severity": 1, "message": "63", "line": 33, "column": 8, "nodeType": "55", "messageId": "56", "endLine": 33, "endColumn": 17 }, { "ruleId": "53", "severity": 1, "message": "64", "line": 34, "column": 8, "nodeType": "55", "messageId": "56", "endLine": 34, "endColumn": 16 }, { "ruleId": "53", "severity": 1, "message": "65", "line": 35, "column": 8, "nodeType": "55", "messageId": "56", "endLine": 35, "endColumn": 13 }, { "ruleId": "53", "severity": 1, "message": "66", "line": 36, "column": 20, "nodeType": "55", "messageId": "56", "endLine": 36, "endColumn": 30 }, { "ruleId": "53", "severity": 1, "message": "67", "line": 36, "column": 32, "nodeType": "55", "messageId": "56", "endLine": 36, "endColumn": 53 }, { "ruleId": "53", "severity": 1, "message": "58", "line": 40, "column": 11, "nodeType": "55", "messageId": "56", "endLine": 40, "endColumn": 19 }, { "ruleId": "53", "severity": 1, "message": "68", "line": 42, "column": 13, "nodeType": "55", "messageId": "56", "endLine": 42, "endColumn": 18 }, { "ruleId": "53", "severity": 1, "message": "69", "line": 42, "column": 33, "nodeType": "55", "messageId": "56", "endLine": 42, "endColumn": 41 }, { "ruleId": "53", "severity": 1, "message": "70", "line": 61, "column": 11, "nodeType": "55", "messageId": "56", "endLine": 61, "endColumn": 19 }, { "ruleId": "53", "severity": 1, "message": "71", "line": 143, "column": 19, "nodeType": "55", "messageId": "56", "endLine": 143, "endColumn": 25 }, { "ruleId": "53", "severity": 1, "message": "72", "line": 153, "column": 19, "nodeType": "55", "messageId": "56", "endLine": 153, "endColumn": 24 }, { "ruleId": "53", "severity": 1, "message": "73", "line": 287, "column": 19, "nodeType": "55", "messageId": "56", "endLine": 287, "endColumn": 22 }, { "ruleId": "53", "severity": 1, "message": "73", "line": 303, "column": 19, "nodeType": "55", "messageId": "56", "endLine": 303, "endColumn": 22 }, { "ruleId": "74", "severity": 1, "message": "75", "line": 316, "column": 8, "nodeType": "76", "endLine": 316, "endColumn": 48, "suggestions": "77" }, "no-unused-vars", "'useState' is defined but never used.", "Identifier", "unusedVar", "'removeToken' is assigned a value but never used.", "'navigate' is assigned a value but never used.", "'Table' is defined but never used.", "'TableBody' is defined but never used.", "'TableCell' is defined but never used.", "'TableContainer' is defined but never used.", "'TableHead' is defined but never used.", "'TableRow' is defined but never used.", "'Paper' is defined but never used.", "'GridColDef' is defined but never used.", "'GridValueGetterParams' is defined but never used.", "'token' is assigned a value but never used.", "'setToken' is assigned a value but never used.", "'userPass' is assigned a value but never used.", "'second' is assigned a value but never used.", "'third' is assigned a value but never used.", "'res' is assigned a value but never used.", "react-hooks/exhaustive-deps", "React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.", "ArrayExpression", ["78"], { "desc": "79", "fix": "80" }, "Update the dependencies array to be: [stockTableFinished, connectivityStatus, getData]", { "range": "81", "text": "82" }, [12102, 12142], "[stockTableFinished, connectivityStatus, getData]"]
