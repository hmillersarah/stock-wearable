{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { GridMainContainer } from '../containers/GridMainContainer';\nimport { GridAutoSizer } from '../GridAutoSizer';\nimport { GridOverlays } from './GridOverlays';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../../hooks/features/density/densitySelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction GridBody(props) {\n  const {\n    children,\n    VirtualScrollerComponent,\n    ColumnHeadersComponent\n  } = props;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\n  const [isVirtualizationDisabled, setIsVirtualizationDisabled] = React.useState(rootProps.disableVirtualization);\n  const disableVirtualization = React.useCallback(() => {\n    setIsVirtualizationDisabled(true);\n  }, []);\n  const enableVirtualization = React.useCallback(() => {\n    setIsVirtualizationDisabled(false);\n  }, []);\n  React.useEffect(() => {\n    setIsVirtualizationDisabled(rootProps.disableVirtualization);\n  }, [rootProps.disableVirtualization]); // The `useGridApiMethod` hook can't be used here, because it only installs the\n  // method if it doesn't exist yet. Once installed, it's never updated again.\n  // This break the methods above, since their closure comes from the first time\n  // they were installed. Which means that calling `setIsVirtualizationDisabled`\n  // will trigger a re-render, but it won't update the state. That can be solved\n  // by migrating the virtualization status to the global state.\n\n  apiRef.current.unstable_disableVirtualization = disableVirtualization;\n  apiRef.current.unstable_enableVirtualization = enableVirtualization;\n  const columnHeadersRef = React.useRef(null);\n  const columnsContainerRef = React.useRef(null);\n  const windowRef = React.useRef(null);\n  const renderingZoneRef = React.useRef(null);\n  apiRef.current.columnHeadersContainerElementRef = columnsContainerRef;\n  apiRef.current.columnHeadersElementRef = columnHeadersRef;\n  apiRef.current.windowRef = windowRef; // TODO rename, it's not attached to the window anymore\n\n  apiRef.current.renderingZoneRef = renderingZoneRef; // TODO remove, nobody should have access to internal parts of the virtualization\n\n  const handleResize = React.useCallback(size => {\n    apiRef.current.publishEvent('resize', size);\n  }, [apiRef]);\n  return /*#__PURE__*/_jsxs(GridMainContainer, {\n    children: [/*#__PURE__*/_jsx(GridOverlays, {}), /*#__PURE__*/_jsx(ColumnHeadersComponent, {\n      ref: columnsContainerRef,\n      innerRef: columnHeadersRef\n    }), /*#__PURE__*/_jsx(GridAutoSizer, {\n      nonce: rootProps.nonce,\n      disableHeight: rootProps.autoHeight,\n      onResize: handleResize,\n      children: size => {\n        const style = {\n          width: size.width,\n          // If `autoHeight` is on, there will be no height value.\n          // In this case, let the container to grow whatever it needs.\n          height: size.height ? size.height - totalHeaderHeight : 'auto',\n          marginTop: totalHeaderHeight\n        };\n        return /*#__PURE__*/_jsx(VirtualScrollerComponent, {\n          ref: windowRef,\n          style: style,\n          disableVirtualization: isVirtualizationDisabled\n        });\n      }\n    }), children]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GridBody.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  children: PropTypes.node,\n  ColumnHeadersComponent: PropTypes.elementType.isRequired,\n  VirtualScrollerComponent: PropTypes.elementType.isRequired\n} : void 0;\nexport { GridBody };","map":{"version":3,"names":["React","PropTypes","useGridApiContext","GridMainContainer","GridAutoSizer","GridOverlays","useGridRootProps","useGridSelector","gridDensityTotalHeaderHeightSelector","jsx","_jsx","jsxs","_jsxs","GridBody","props","children","VirtualScrollerComponent","ColumnHeadersComponent","apiRef","rootProps","totalHeaderHeight","isVirtualizationDisabled","setIsVirtualizationDisabled","useState","disableVirtualization","useCallback","enableVirtualization","useEffect","current","unstable_disableVirtualization","unstable_enableVirtualization","columnHeadersRef","useRef","columnsContainerRef","windowRef","renderingZoneRef","columnHeadersContainerElementRef","columnHeadersElementRef","handleResize","size","publishEvent","ref","innerRef","nonce","disableHeight","autoHeight","onResize","style","width","height","marginTop","process","env","NODE_ENV","propTypes","node","elementType","isRequired"],"sources":["C:/Users/BZHU-X1/Documents/GitHub/stock-wearable/frontend/node_modules/@mui/x-data-grid/components/base/GridBody.js"],"sourcesContent":["import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\r\nimport { GridMainContainer } from '../containers/GridMainContainer';\r\nimport { GridAutoSizer } from '../GridAutoSizer';\r\nimport { GridOverlays } from './GridOverlays';\r\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\r\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\r\nimport { gridDensityTotalHeaderHeightSelector } from '../../hooks/features/density/densitySelector';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\n\r\nfunction GridBody(props) {\r\n  const {\r\n    children,\r\n    VirtualScrollerComponent,\r\n    ColumnHeadersComponent\r\n  } = props;\r\n  const apiRef = useGridApiContext();\r\n  const rootProps = useGridRootProps();\r\n  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\r\n  const [isVirtualizationDisabled, setIsVirtualizationDisabled] = React.useState(rootProps.disableVirtualization);\r\n  const disableVirtualization = React.useCallback(() => {\r\n    setIsVirtualizationDisabled(true);\r\n  }, []);\r\n  const enableVirtualization = React.useCallback(() => {\r\n    setIsVirtualizationDisabled(false);\r\n  }, []);\r\n  React.useEffect(() => {\r\n    setIsVirtualizationDisabled(rootProps.disableVirtualization);\r\n  }, [rootProps.disableVirtualization]); // The `useGridApiMethod` hook can't be used here, because it only installs the\r\n  // method if it doesn't exist yet. Once installed, it's never updated again.\r\n  // This break the methods above, since their closure comes from the first time\r\n  // they were installed. Which means that calling `setIsVirtualizationDisabled`\r\n  // will trigger a re-render, but it won't update the state. That can be solved\r\n  // by migrating the virtualization status to the global state.\r\n\r\n  apiRef.current.unstable_disableVirtualization = disableVirtualization;\r\n  apiRef.current.unstable_enableVirtualization = enableVirtualization;\r\n  const columnHeadersRef = React.useRef(null);\r\n  const columnsContainerRef = React.useRef(null);\r\n  const windowRef = React.useRef(null);\r\n  const renderingZoneRef = React.useRef(null);\r\n  apiRef.current.columnHeadersContainerElementRef = columnsContainerRef;\r\n  apiRef.current.columnHeadersElementRef = columnHeadersRef;\r\n  apiRef.current.windowRef = windowRef; // TODO rename, it's not attached to the window anymore\r\n\r\n  apiRef.current.renderingZoneRef = renderingZoneRef; // TODO remove, nobody should have access to internal parts of the virtualization\r\n\r\n  const handleResize = React.useCallback(size => {\r\n    apiRef.current.publishEvent('resize', size);\r\n  }, [apiRef]);\r\n  return /*#__PURE__*/_jsxs(GridMainContainer, {\r\n    children: [/*#__PURE__*/_jsx(GridOverlays, {}), /*#__PURE__*/_jsx(ColumnHeadersComponent, {\r\n      ref: columnsContainerRef,\r\n      innerRef: columnHeadersRef\r\n    }), /*#__PURE__*/_jsx(GridAutoSizer, {\r\n      nonce: rootProps.nonce,\r\n      disableHeight: rootProps.autoHeight,\r\n      onResize: handleResize,\r\n      children: size => {\r\n        const style = {\r\n          width: size.width,\r\n          // If `autoHeight` is on, there will be no height value.\r\n          // In this case, let the container to grow whatever it needs.\r\n          height: size.height ? size.height - totalHeaderHeight : 'auto',\r\n          marginTop: totalHeaderHeight\r\n        };\r\n        return /*#__PURE__*/_jsx(VirtualScrollerComponent, {\r\n          ref: windowRef,\r\n          style: style,\r\n          disableVirtualization: isVirtualizationDisabled\r\n        });\r\n      }\r\n    }), children]\r\n  });\r\n}\r\n\r\nprocess.env.NODE_ENV !== \"production\" ? GridBody.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n  children: PropTypes.node,\r\n  ColumnHeadersComponent: PropTypes.elementType.isRequired,\r\n  VirtualScrollerComponent: PropTypes.elementType.isRequired\r\n} : void 0;\r\nexport { GridBody };"],"mappings":"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"},"metadata":{},"sourceType":"module"}