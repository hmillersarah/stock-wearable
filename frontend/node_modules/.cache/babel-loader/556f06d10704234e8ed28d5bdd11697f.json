{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { wrapWithWarningOnCall } from '../../../utils/warning';\n/**\r\n * @category Columns\r\n * @deprecated Use the selector returning exactly the value you are looking for.\r\n * @ignore - do not document.\r\n * TODO v6: Rename `gridColumnsStateSelector`\r\n */\n\nexport const gridColumnsSelector = state => state.columns;\n/**\r\n * Get the field of each column.\r\n * @category Columns\r\n */\n\nexport const gridColumnFieldsSelector = createSelector(gridColumnsSelector, columnsState => columnsState.all);\n/**\r\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Columns\r\n */\n\nexport const gridColumnLookupSelector = createSelector(gridColumnsSelector, columnsState => columnsState.lookup);\n/**\r\n * Get the columns as an array.\r\n * @category Columns\r\n */\n\nexport const gridColumnDefinitionsSelector = createSelector(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\n/**\r\n * Get the column visibility model, containing the visibility status of each column.\r\n * If a column is not registered in the model, it is visible.\r\n * @category Visible Columns\r\n */\n\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsSelector, columnsState => columnsState.columnVisibilityModel);\n/**\r\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Visible Columns\r\n */\n\nexport const gridVisibleColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\n/**\r\n * Get the field of each visible column.\r\n * @category Visible Columns\r\n */\n\nexport const gridVisibleColumnFieldsSelector = createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\n/**\r\n * Get the left position in pixel of each visible columns relative to the left of the first column.\r\n * @category Visible Columns\r\n */\n\nexport const gridColumnPositionsSelector = createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => {\n  const positions = [];\n  let currentPosition = 0;\n  for (let i = 0; i < visibleColumns.length; i += 1) {\n    positions.push(currentPosition);\n    currentPosition += visibleColumns[i].computedWidth;\n  }\n  return positions;\n});\n/**\r\n * Get the summed width of all the visible columns.\r\n * @category Visible Columns\r\n */\n\nexport const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\n});\n/**\r\n * Get the filterable columns as an array.\r\n * @category Columns\r\n */\n\nexport const gridFilterableColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\n/**\r\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Columns\r\n */\n\nexport const gridFilterableColumnLookupSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\n  if (col.filterable) {\n    acc[col.field] = col;\n  }\n  return acc;\n}, {}));\n/**\r\n * @category Columns\r\n * @deprecated Use `gridColumnFieldsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport const allGridColumnsFieldsSelector = wrapWithWarningOnCall(gridColumnFieldsSelector, ['MUI: The method allGridColumnsFieldsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnFieldsSelector instead']);\n/**\r\n * @category Columns\r\n * @deprecated Use `gridColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport const allGridColumnsSelector = wrapWithWarningOnCall(gridColumnDefinitionsSelector, ['MUI: The method allGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnDefinitionsSelector instead']);\n/**\r\n * @category Visible Columns\r\n * @deprecated Use `gridVisibleColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport const visibleGridColumnsSelector = wrapWithWarningOnCall(gridVisibleColumnDefinitionsSelector, ['MUI: The method visibleGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridVisibleColumnDefinitionsSelector instead']);\n/**\r\n * @category Columns\r\n * @deprecated Use `gridFilterableColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport const filterableGridColumnsSelector = wrapWithWarningOnCall(gridFilterableColumnDefinitionsSelector, ['MUI: The method filterableGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead']);\n/**\r\n * @category Columns\r\n * @deprecated Use `gridFilterableColumnLookupSelector` instead (not the same return format).\r\n * @ignore - do not document.\r\n */\n\nexport const filterableGridColumnsIdsSelector = wrapWithWarningOnCall(createSelector(gridFilterableColumnDefinitionsSelector, columns => columns.map(col => col.field)), ['MUI: The method filterableGridColumnsIdsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead.', 'The return format is now a lookup, if you want to get the same output as before, use the following code:', '', 'const lookup = gridFilterableColumnLookupSelector(apiRef);', 'const fields = gridColumnFieldsSelector(apiRef).filter(field => lookup[field]);']);\n/**\r\n * Get the amount of visible columns.\r\n * @category Visible Columns\r\n * @deprecated Use the length of the array returned by `gridVisibleColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport const visibleGridColumnsLengthSelector = wrapWithWarningOnCall(createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.length), ['MUI: The method visibleGridColumnsLengthSelector is deprecated and will be removed in the next major version.', 'Use the length of the array returned by gridVisibleColumnDefinitionsSelector instead.']);\n/**\r\n * @category Visible Columns\r\n * @deprecated Use `gridColumnsTotalWidthSelector` or `gridColumnPositionsSelector` instead.\r\n * @ignore - do not document.\r\n */\n\nexport const gridColumnsMetaSelector = wrapWithWarningOnCall(createSelector(gridColumnPositionsSelector, gridColumnsTotalWidthSelector, (positions, totalWidth) => ({\n  totalWidth,\n  positions\n})), ['MUI: The method gridColumnsMetaSelector is deprecated and will be removed in the next major version.', 'Use gridColumnsTotalWidthSelector or gridColumnPositionsSelector instead']);","map":{"version":3,"names":["createSelector","wrapWithWarningOnCall","gridColumnsSelector","state","columns","gridColumnFieldsSelector","columnsState","all","gridColumnLookupSelector","lookup","gridColumnDefinitionsSelector","allFields","map","field","gridColumnVisibilityModelSelector","columnVisibilityModel","gridVisibleColumnDefinitionsSelector","filter","column","gridVisibleColumnFieldsSelector","visibleColumns","gridColumnPositionsSelector","positions","currentPosition","i","length","push","computedWidth","gridColumnsTotalWidthSelector","colCount","gridFilterableColumnDefinitionsSelector","col","filterable","gridFilterableColumnLookupSelector","reduce","acc","allGridColumnsFieldsSelector","allGridColumnsSelector","visibleGridColumnsSelector","filterableGridColumnsSelector","filterableGridColumnsIdsSelector","visibleGridColumnsLengthSelector","gridColumnsMetaSelector","totalWidth"],"sources":["C:/Users/BZHU-X1/Documents/GitHub/stock-wearable/frontend/node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js"],"sourcesContent":["import { createSelector } from '../../../utils/createSelector';\r\nimport { wrapWithWarningOnCall } from '../../../utils/warning';\r\n/**\r\n * @category Columns\r\n * @deprecated Use the selector returning exactly the value you are looking for.\r\n * @ignore - do not document.\r\n * TODO v6: Rename `gridColumnsStateSelector`\r\n */\r\n\r\nexport const gridColumnsSelector = state => state.columns;\r\n/**\r\n * Get the field of each column.\r\n * @category Columns\r\n */\r\n\r\nexport const gridColumnFieldsSelector = createSelector(gridColumnsSelector, columnsState => columnsState.all);\r\n/**\r\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Columns\r\n */\r\n\r\nexport const gridColumnLookupSelector = createSelector(gridColumnsSelector, columnsState => columnsState.lookup);\r\n/**\r\n * Get the columns as an array.\r\n * @category Columns\r\n */\r\n\r\nexport const gridColumnDefinitionsSelector = createSelector(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map(field => lookup[field]));\r\n/**\r\n * Get the column visibility model, containing the visibility status of each column.\r\n * If a column is not registered in the model, it is visible.\r\n * @category Visible Columns\r\n */\r\n\r\nexport const gridColumnVisibilityModelSelector = createSelector(gridColumnsSelector, columnsState => columnsState.columnVisibilityModel);\r\n/**\r\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Visible Columns\r\n */\r\n\r\nexport const gridVisibleColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter(column => columnVisibilityModel[column.field] !== false));\r\n/**\r\n * Get the field of each visible column.\r\n * @category Visible Columns\r\n */\r\n\r\nexport const gridVisibleColumnFieldsSelector = createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.map(column => column.field));\r\n/**\r\n * Get the left position in pixel of each visible columns relative to the left of the first column.\r\n * @category Visible Columns\r\n */\r\n\r\nexport const gridColumnPositionsSelector = createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => {\r\n  const positions = [];\r\n  let currentPosition = 0;\r\n\r\n  for (let i = 0; i < visibleColumns.length; i += 1) {\r\n    positions.push(currentPosition);\r\n    currentPosition += visibleColumns[i].computedWidth;\r\n  }\r\n\r\n  return positions;\r\n});\r\n/**\r\n * Get the summed width of all the visible columns.\r\n * @category Visible Columns\r\n */\r\n\r\nexport const gridColumnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\r\n  const colCount = visibleColumns.length;\r\n\r\n  if (colCount === 0) {\r\n    return 0;\r\n  }\r\n\r\n  return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;\r\n});\r\n/**\r\n * Get the filterable columns as an array.\r\n * @category Columns\r\n */\r\n\r\nexport const gridFilterableColumnDefinitionsSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.filter(col => col.filterable));\r\n/**\r\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\r\n * @category Columns\r\n */\r\n\r\nexport const gridFilterableColumnLookupSelector = createSelector(gridColumnDefinitionsSelector, columns => columns.reduce((acc, col) => {\r\n  if (col.filterable) {\r\n    acc[col.field] = col;\r\n  }\r\n\r\n  return acc;\r\n}, {}));\r\n/**\r\n * @category Columns\r\n * @deprecated Use `gridColumnFieldsSelector` instead.\r\n * @ignore - do not document.\r\n */\r\n\r\nexport const allGridColumnsFieldsSelector = wrapWithWarningOnCall(gridColumnFieldsSelector, ['MUI: The method allGridColumnsFieldsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnFieldsSelector instead']);\r\n/**\r\n * @category Columns\r\n * @deprecated Use `gridColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\r\n\r\nexport const allGridColumnsSelector = wrapWithWarningOnCall(gridColumnDefinitionsSelector, ['MUI: The method allGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridColumnDefinitionsSelector instead']);\r\n/**\r\n * @category Visible Columns\r\n * @deprecated Use `gridVisibleColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\r\n\r\nexport const visibleGridColumnsSelector = wrapWithWarningOnCall(gridVisibleColumnDefinitionsSelector, ['MUI: The method visibleGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridVisibleColumnDefinitionsSelector instead']);\r\n/**\r\n * @category Columns\r\n * @deprecated Use `gridFilterableColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\r\n\r\nexport const filterableGridColumnsSelector = wrapWithWarningOnCall(gridFilterableColumnDefinitionsSelector, ['MUI: The method filterableGridColumnsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead']);\r\n/**\r\n * @category Columns\r\n * @deprecated Use `gridFilterableColumnLookupSelector` instead (not the same return format).\r\n * @ignore - do not document.\r\n */\r\n\r\nexport const filterableGridColumnsIdsSelector = wrapWithWarningOnCall(createSelector(gridFilterableColumnDefinitionsSelector, columns => columns.map(col => col.field)), ['MUI: The method filterableGridColumnsIdsSelector is deprecated and will be removed in the next major version.', 'Use gridFilterableColumnDefinitionsSelector instead.', 'The return format is now a lookup, if you want to get the same output as before, use the following code:', '', 'const lookup = gridFilterableColumnLookupSelector(apiRef);', 'const fields = gridColumnFieldsSelector(apiRef).filter(field => lookup[field]);']);\r\n/**\r\n * Get the amount of visible columns.\r\n * @category Visible Columns\r\n * @deprecated Use the length of the array returned by `gridVisibleColumnDefinitionsSelector` instead.\r\n * @ignore - do not document.\r\n */\r\n\r\nexport const visibleGridColumnsLengthSelector = wrapWithWarningOnCall(createSelector(gridVisibleColumnDefinitionsSelector, visibleColumns => visibleColumns.length), ['MUI: The method visibleGridColumnsLengthSelector is deprecated and will be removed in the next major version.', 'Use the length of the array returned by gridVisibleColumnDefinitionsSelector instead.']);\r\n/**\r\n * @category Visible Columns\r\n * @deprecated Use `gridColumnsTotalWidthSelector` or `gridColumnPositionsSelector` instead.\r\n * @ignore - do not document.\r\n */\r\n\r\nexport const gridColumnsMetaSelector = wrapWithWarningOnCall(createSelector(gridColumnPositionsSelector, gridColumnsTotalWidthSelector, (positions, totalWidth) => ({\r\n  totalWidth,\r\n  positions\r\n})), ['MUI: The method gridColumnsMetaSelector is deprecated and will be removed in the next major version.', 'Use gridColumnsTotalWidthSelector or gridColumnPositionsSelector instead']);"],"mappings":"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"},"metadata":{},"sourceType":"module"}