{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { debounce, capitalize } from '@mui/material/utils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\r\n * @requires useGridPageSize (method)\r\n * @requires useGridPage (method)\r\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const hydrateRowsMeta = React.useCallback(() => {\n    var _pinnedRows$top, _pinnedRows$bottom;\n    hasRowWithAutoHeight.current = false;\n    const densityFactor = gridDensityFactorSelector(apiRef.current.state, apiRef.current.instanceId);\n    const calculateRowProcessedSizes = row => {\n      if (!rowsHeightLookup.current[row.id]) {\n        rowsHeightLookup.current[row.id] = {\n          sizes: {\n            baseCenter: rowHeightFromDensity\n          },\n          isResized: false,\n          autoHeight: false,\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\n        };\n      }\n\n      const {\n        isResized,\n        needsFirstMeasurement,\n        sizes\n      } = rowsHeightLookup.current[row.id];\n      let baseRowHeight = rowHeightFromDensity;\n      const existingBaseRowHeight = sizes.baseCenter;\n      if (isResized) {\n        // Do not recalculate resized row height and use the value from the lookup\n        baseRowHeight = existingBaseRowHeight;\n      } else if (getRowHeightProp) {\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n          densityFactor\n        }));\n        if (rowHeightFromUser === 'auto') {\n          if (needsFirstMeasurement) {\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n              densityFactor\n            })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\n\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\n          } else {\n            baseRowHeight = existingBaseRowHeight;\n          }\n          hasRowWithAutoHeight.current = true;\n          rowsHeightLookup.current[row.id].autoHeight = true;\n        } else {\n          // Default back to base rowHeight if getRowHeight returns null or undefined.\n          baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n          rowsHeightLookup.current[row.id].autoHeight = false;\n        }\n      } else {\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n      }\n      const existingBaseSizes = Object.entries(sizes).reduce((acc, _ref) => {\n        let [key, size] = _ref;\n        if (/^base[A-Z]/.test(key)) {\n          acc[key] = size;\n        }\n        return acc;\n      }, {}); // We use an object to make simple to check if a height is already added or not\n\n      const initialHeights = _extends({}, existingBaseSizes, {\n        baseCenter: baseRowHeight\n      });\n      if (getRowSpacing) {\n        var _spacing$top, _spacing$bottom;\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n        const spacing = getRowSpacing(_extends({}, row, {\n          isFirstVisible: indexRelativeToCurrentPage === 0,\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n          indexRelativeToCurrentPage\n        }));\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n      }\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\n      return processedSizes;\n    };\n    const positions = [];\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n      positions.push(acc);\n      let maximumBaseSize = 0;\n      let otherSizes = 0;\n      const processedSizes = calculateRowProcessedSizes(row);\n      Object.entries(processedSizes).forEach(_ref2 => {\n        let [size, value] = _ref2;\n        if (/^base[A-Z]/.test(size)) {\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\n        } else {\n          otherSizes += value;\n        }\n      });\n      return acc + maximumBaseSize + otherSizes;\n    }, 0);\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\n      calculateRowProcessedSizes(row);\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.baseCenter : rowHeightFromDensity;\n  }, [rowHeightFromDensity]);\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\n    if (needsHydration) {\n      debouncedHydrateRowsMeta();\n    }\n  }, [debouncedHydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []);\n  const resetRowHeights = React.useCallback(() => {\n    rowsHeightLookup.current = {};\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\n    resetRowHeights\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};","map":{"version":3,"names":["_extends","React","debounce","capitalize","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityRowHeightSelector","gridDensityFactorSelector","gridFilterStateSelector","gridPaginationSelector","gridSortingStateSelector","useGridRegisterPipeApplier","gridPinnedRowsSelector","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","useGridRowsMeta","apiRef","props","getRowHeight","getRowHeightProp","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","lastMeasuredRowIndex","hasRowWithAutoHeight","rowHeightFromDensity","filterState","paginationState","sortingState","currentPage","pinnedRows","hydrateRowsMeta","useCallback","_pinnedRows$top","_pinnedRows$bottom","current","densityFactor","instanceId","calculateRowProcessedSizes","row","id","sizes","baseCenter","isResized","autoHeight","needsFirstMeasurement","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","existingBaseSizes","Object","entries","reduce","acc","key","size","test","initialHeights","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","rows","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","push","maximumBaseSize","otherSizes","forEach","value","setState","Infinity","forceUpdate","rowId","height","getRowInternalSizes","_rowsHeightLookup$cur","setRowHeight","debouncedHydrateRowsMeta","useMemo","storeMeasuredRowHeight","position","needsHydration","rowHasAutoHeight","_rowsHeightLookup$cur2","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","resetRowHeights","useEffect","rowsMetaApi","unstable_getLastMeasuredRowIndex","unstable_setLastMeasuredRowIndex","unstable_rowHasAutoHeight","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement"],"sources":["C:/Users/BZHU-X1/Documents/GitHub/stock-wearable/frontend/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { debounce, capitalize } from '@mui/material/utils';\r\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\r\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\r\nimport { useGridSelector } from '../../utils/useGridSelector';\r\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\r\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\r\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\r\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\r\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\r\nimport { gridPinnedRowsSelector } from './gridRowsSelector';\r\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\r\n  rowsMeta: {\r\n    currentPageTotalHeight: 0,\r\n    positions: []\r\n  }\r\n});\r\n/**\r\n * @requires useGridPageSize (method)\r\n * @requires useGridPage (method)\r\n */\r\n\r\nexport const useGridRowsMeta = (apiRef, props) => {\r\n  const {\r\n    getRowHeight: getRowHeightProp,\r\n    getRowSpacing,\r\n    getEstimatedRowHeight\r\n  } = props;\r\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\r\n\r\n  const lastMeasuredRowIndex = React.useRef(-1);\r\n  const hasRowWithAutoHeight = React.useRef(false);\r\n  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\r\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\r\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\r\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\r\n  const currentPage = useGridVisibleRows(apiRef, props);\r\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\r\n  const hydrateRowsMeta = React.useCallback(() => {\r\n    var _pinnedRows$top, _pinnedRows$bottom;\r\n\r\n    hasRowWithAutoHeight.current = false;\r\n    const densityFactor = gridDensityFactorSelector(apiRef.current.state, apiRef.current.instanceId);\r\n\r\n    const calculateRowProcessedSizes = row => {\r\n      if (!rowsHeightLookup.current[row.id]) {\r\n        rowsHeightLookup.current[row.id] = {\r\n          sizes: {\r\n            baseCenter: rowHeightFromDensity\r\n          },\r\n          isResized: false,\r\n          autoHeight: false,\r\n          needsFirstMeasurement: true // Assume all rows will need to be measured by default\r\n\r\n        };\r\n      }\r\n\r\n      const {\r\n        isResized,\r\n        needsFirstMeasurement,\r\n        sizes\r\n      } = rowsHeightLookup.current[row.id];\r\n      let baseRowHeight = rowHeightFromDensity;\r\n      const existingBaseRowHeight = sizes.baseCenter;\r\n\r\n      if (isResized) {\r\n        // Do not recalculate resized row height and use the value from the lookup\r\n        baseRowHeight = existingBaseRowHeight;\r\n      } else if (getRowHeightProp) {\r\n        const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\r\n          densityFactor\r\n        }));\r\n\r\n        if (rowHeightFromUser === 'auto') {\r\n          if (needsFirstMeasurement) {\r\n            const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\r\n              densityFactor\r\n            })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\r\n\r\n            baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\r\n          } else {\r\n            baseRowHeight = existingBaseRowHeight;\r\n          }\r\n\r\n          hasRowWithAutoHeight.current = true;\r\n          rowsHeightLookup.current[row.id].autoHeight = true;\r\n        } else {\r\n          // Default back to base rowHeight if getRowHeight returns null or undefined.\r\n          baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\r\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\r\n          rowsHeightLookup.current[row.id].autoHeight = false;\r\n        }\r\n      } else {\r\n        rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\r\n      }\r\n\r\n      const existingBaseSizes = Object.entries(sizes).reduce((acc, [key, size]) => {\r\n        if (/^base[A-Z]/.test(key)) {\r\n          acc[key] = size;\r\n        }\r\n\r\n        return acc;\r\n      }, {}); // We use an object to make simple to check if a height is already added or not\r\n\r\n      const initialHeights = _extends({}, existingBaseSizes, {\r\n        baseCenter: baseRowHeight\r\n      });\r\n\r\n      if (getRowSpacing) {\r\n        var _spacing$top, _spacing$bottom;\r\n\r\n        const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\r\n        const spacing = getRowSpacing(_extends({}, row, {\r\n          isFirstVisible: indexRelativeToCurrentPage === 0,\r\n          isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\r\n          indexRelativeToCurrentPage\r\n        }));\r\n        initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\r\n        initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\r\n      }\r\n\r\n      const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\r\n      rowsHeightLookup.current[row.id].sizes = processedSizes;\r\n      return processedSizes;\r\n    };\r\n\r\n    const positions = [];\r\n    const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\r\n      positions.push(acc);\r\n      let maximumBaseSize = 0;\r\n      let otherSizes = 0;\r\n      const processedSizes = calculateRowProcessedSizes(row);\r\n      Object.entries(processedSizes).forEach(([size, value]) => {\r\n        if (/^base[A-Z]/.test(size)) {\r\n          maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;\r\n        } else {\r\n          otherSizes += value;\r\n        }\r\n      });\r\n      return acc + maximumBaseSize + otherSizes;\r\n    }, 0);\r\n    pinnedRows == null ? void 0 : (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.forEach(row => {\r\n      calculateRowProcessedSizes(row);\r\n    });\r\n    pinnedRows == null ? void 0 : (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.forEach(row => {\r\n      calculateRowProcessedSizes(row);\r\n    });\r\n    apiRef.current.setState(state => {\r\n      return _extends({}, state, {\r\n        rowsMeta: {\r\n          currentPageTotalHeight,\r\n          positions\r\n        }\r\n      });\r\n    });\r\n\r\n    if (!hasRowWithAutoHeight.current) {\r\n      // No row has height=auto, so all rows are already measured\r\n      lastMeasuredRowIndex.current = Infinity;\r\n    }\r\n\r\n    apiRef.current.forceUpdate();\r\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows]);\r\n  const getRowHeight = React.useCallback(rowId => {\r\n    const height = rowsHeightLookup.current[rowId];\r\n    return height ? height.sizes.baseCenter : rowHeightFromDensity;\r\n  }, [rowHeightFromDensity]);\r\n\r\n  const getRowInternalSizes = rowId => {\r\n    var _rowsHeightLookup$cur;\r\n\r\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\r\n  };\r\n\r\n  const setRowHeight = React.useCallback((id, height) => {\r\n    rowsHeightLookup.current[id].sizes.baseCenter = height;\r\n    rowsHeightLookup.current[id].isResized = true;\r\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\r\n    hydrateRowsMeta();\r\n  }, [hydrateRowsMeta]);\r\n  const debouncedHydrateRowsMeta = React.useMemo(() => debounce(hydrateRowsMeta), [hydrateRowsMeta]);\r\n  const storeMeasuredRowHeight = React.useCallback((id, height, position) => {\r\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\r\n      return;\r\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\r\n\r\n\r\n    const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] !== height;\r\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\r\n    rowsHeightLookup.current[id].sizes[`base${capitalize(position)}`] = height;\r\n\r\n    if (needsHydration) {\r\n      debouncedHydrateRowsMeta();\r\n    }\r\n  }, [debouncedHydrateRowsMeta]);\r\n  const rowHasAutoHeight = React.useCallback(id => {\r\n    var _rowsHeightLookup$cur2;\r\n\r\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\r\n  }, []);\r\n  const getLastMeasuredRowIndex = React.useCallback(() => {\r\n    return lastMeasuredRowIndex.current;\r\n  }, []);\r\n  const setLastMeasuredRowIndex = React.useCallback(index => {\r\n    if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {\r\n      lastMeasuredRowIndex.current = index;\r\n    }\r\n  }, []);\r\n  const resetRowHeights = React.useCallback(() => {\r\n    rowsHeightLookup.current = {};\r\n    hydrateRowsMeta();\r\n  }, [hydrateRowsMeta]); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\r\n  // Because of variable row height this is needed for the virtualization\r\n\r\n  React.useEffect(() => {\r\n    hydrateRowsMeta();\r\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\r\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\r\n  const rowsMetaApi = {\r\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\r\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\r\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\r\n    unstable_getRowHeight: getRowHeight,\r\n    unstable_getRowInternalSizes: getRowInternalSizes,\r\n    unstable_setRowHeight: setRowHeight,\r\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,\r\n    resetRowHeights\r\n  };\r\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}